!function(window){"use strict";function registerModule(moduleName,dependencies){angular.module(moduleName,dependencies||[]),angular.module(applicationModuleName).requires.push(moduleName)}var applicationModuleName="mean",service={applicationModuleName:applicationModuleName,applicationModuleVendorDependencies:["ngResource","ngAnimate","ngMessages","ui.router","angularFileUpload","ngMaterial"],registerModule:registerModule};window.ApplicationConfiguration=service}(window),function(app){"use strict";function bootstrapConfig($locationProvider,$httpProvider,$mdThemingProvider,$mdIconProvider){$locationProvider.html5Mode(!0).hashPrefix("!"),$httpProvider.interceptors.push("authInterceptor"),$mdIconProvider.icon("menu","./assets/svg/menu.svg",24),$mdThemingProvider.theme("default").primaryPalette("blue",{"default":"500","hue-1":"100","hue-2":"600","hue-3":"A100"})}function init(){if(window.location.hash&&"#_=_"===window.location.hash)if(window.history&&history.pushState)window.history.pushState("",document.title,window.location.pathname);else{var scroll={top:document.body.scrollTop,left:document.body.scrollLeft};window.location.hash="",document.body.scrollTop=scroll.top,document.body.scrollLeft=scroll.left}angular.bootstrap(document,[app.applicationModuleName])}angular.module(app.applicationModuleName,app.applicationModuleVendorDependencies),angular.module(app.applicationModuleName).config(bootstrapConfig),bootstrapConfig.$inject=["$locationProvider","$httpProvider","$mdThemingProvider","$mdIconProvider"],angular.element(document).ready(init)}(ApplicationConfiguration),function(app){"use strict";app.registerModule("carowners",["core"]),app.registerModule("carowners.services"),app.registerModule("carowners.routes",["ui.router","core.routes","carowners.services"])}(ApplicationConfiguration),function(app){"use strict";app.registerModule("core"),app.registerModule("core.routes",["ui.router"]),app.registerModule("core.admin",["core"]),app.registerModule("core.admin.routes",["ui.router"])}(ApplicationConfiguration),function(app){"use strict";app.registerModule("users"),app.registerModule("users.admin"),app.registerModule("users.admin.routes",["ui.router","core.routes","users.admin.services"]),app.registerModule("users.admin.services"),app.registerModule("users.routes",["ui.router","core.routes"]),app.registerModule("users.services")}(ApplicationConfiguration),function(app){"use strict";app.registerModule("workshops",["core"]),app.registerModule("workshops.services"),app.registerModule("workshops.routes",["ui.router","core.routes","workshops.services"])}(ApplicationConfiguration),function(){"use strict";function menuConfig(menuService){menuService.addMenuItem("topbar",{title:"Carowners",state:"carowners",type:"dropdown",roles:["user"]}),menuService.addSubMenuItem("topbar","carowners",{title:"List Carowners",state:"carowners.list",roles:["user"]}),menuService.addSubMenuItem("topbar","carowners",{title:"Create Carowner",state:"carowners.create",roles:["user"]})}angular.module("carowners").run(menuConfig),menuConfig.$inject=["menuService"]}(),function(){"use strict";function routeConfig($stateProvider){$stateProvider.state("carowners",{"abstract":!0,url:"/carowners",template:"<ui-view/>"}).state("carowners.list",{url:"",templateUrl:"modules/carowners/client/views/list-carowners.client.view.html",controller:"CarownersListController",controllerAs:"vm",data:{pageTitle:"Carowners List"}}).state("carowners.create",{url:"/create",templateUrl:"modules/carowners/client/views/form-carowner.client.view.html",controller:"CarownersController",controllerAs:"vm",resolve:{carownerResolve:newCarowner},data:{roles:["user","admin"],pageTitle:"Carowners Create"}}).state("carowners.edit",{url:"/:carownerId/edit",templateUrl:"modules/carowners/client/views/form-carowner.client.view.html",controller:"CarownersController",controllerAs:"vm",resolve:{carownerResolve:getCarowner},data:{roles:["user","admin"],pageTitle:"Edit Carowner {{ carownerResolve.title }}"}}).state("carowners.view",{url:"/:carownerId",templateUrl:"modules/carowners/client/views/view-carowner.client.view.html",controller:"CarownersController",controllerAs:"vm",resolve:{carownerResolve:getCarowner},data:{pageTitle:"Carowner {{ carownerResolve.title }}"}})}function getCarowner($stateParams,CarownersService){return CarownersService.get({carownerId:$stateParams.carownerId}).$promise}function newCarowner(CarownersService){return new CarownersService}angular.module("carowners.routes").config(routeConfig),routeConfig.$inject=["$stateProvider"],getCarowner.$inject=["$stateParams","CarownersService"],newCarowner.$inject=["CarownersService"]}(),function(){"use strict";function CarownersController($scope,$state,carowner,$window,Authentication){function remove(){$window.confirm("Are you sure you want to delete?")&&vm.carowner.$remove($state.go("carowners.list"))}function save(isValid){function successCallback(res){$state.go("carowners.view",{carownerId:res._id})}function errorCallback(res){vm.error=res.data.message}return isValid?void(vm.carowner._id?vm.carowner.$update(successCallback,errorCallback):vm.carowner.$save(successCallback,errorCallback)):($scope.$broadcast("show-errors-check-validity","vm.form.carownerForm"),!1)}var vm=this;vm.carowner=carowner,vm.authentication=Authentication,vm.error=null,vm.form={},vm.remove=remove,vm.save=save}angular.module("carowners").controller("CarownersController",CarownersController),CarownersController.$inject=["$scope","$state","carownerResolve","$window","Authentication"]}(),function(){"use strict";function CarownersListController(CarownersService){var vm=this;vm.carowners=CarownersService.query()}angular.module("carowners").controller("CarownersListController",CarownersListController),CarownersListController.$inject=["CarownersService"]}(),function(){"use strict";function CarownersService($resource){return $resource("api/carowners/:carownerId",{carownerId:"@_id"},{update:{method:"PUT"}})}angular.module("carowners.services").factory("CarownersService",CarownersService),CarownersService.$inject=["$resource"]}(),function(){"use strict";function menuConfig(menuService){menuService.addMenuItem("topbar",{title:"Admin",state:"admin",type:"dropdown",roles:["admin"]})}angular.module("core.admin").run(menuConfig),menuConfig.$inject=["menuService"]}(),function(){"use strict";function routeConfig($stateProvider){$stateProvider.state("admin",{"abstract":!0,url:"/admin",template:"<ui-view/>",data:{roles:["admin"]}})}angular.module("core.admin.routes").config(routeConfig),routeConfig.$inject=["$stateProvider"]}(),function(){"use strict";function nospace(){return function(value){return value?value.replace(/ /g,""):""}}function humanizeDoc(){return function(doc){if(doc)return"directive"===doc.type?doc.name.replace(/([A-Z])/g,function($1){return"-"+$1.toLowerCase()}):doc.label||doc.name}}angular.module("core").filter(nospace).filter(humanizeDoc)}(),function(){"use strict";function menuConfig(menuService){menuService.addMenu("account",{roles:["user"]}),menuService.addMenuItem("account",{title:"",state:"settings",type:"dropdown",roles:["user"]}),menuService.addSubMenuItem("account","settings",{title:"Edit Profile",state:"settings.profile"}),menuService.addSubMenuItem("account","settings",{title:"Edit Profile Picture",state:"settings.picture"}),menuService.addSubMenuItem("account","settings",{title:"Change Password",state:"settings.password"})}angular.module("core").run(menuConfig),menuConfig.$inject=["menuService"]}(),function(){"use strict";function routeFilter($rootScope,$state,Authentication){function stateChangeStart(event,toState,toParams,fromState,fromParams){if(toState.data&&toState.data.roles&&toState.data.roles.length>0){for(var allowed=!1,i=0,roles=toState.data.roles;i<roles.length;i++)if("guest"===roles[i]||Authentication.user&&void 0!==Authentication.user.roles&&Authentication.user.roles.indexOf(roles[i])!==-1){allowed=!0;break}allowed||(event.preventDefault(),void 0!==Authentication.user&&"object"==typeof Authentication.user?$state.transitionTo("forbidden"):$state.go("authentication.signin").then(function(){storePreviousState(toState,toParams)}))}}function stateChangeSuccess(event,toState,toParams,fromState,fromParams){storePreviousState(fromState,fromParams)}function storePreviousState(state,params){state.data&&state.data.ignoreState||($state.previous={state:state,params:params,href:$state.href(state,params)})}$rootScope.$on("$stateChangeStart",stateChangeStart),$rootScope.$on("$stateChangeSuccess",stateChangeSuccess)}angular.module("core").run(routeFilter),routeFilter.$inject=["$rootScope","$state","Authentication"]}(),function(){"use strict";function routeConfig($stateProvider,$urlRouterProvider){$urlRouterProvider.rule(function($injector,$location){var path=$location.path(),hasTrailingSlash=path.length>1&&"/"===path[path.length-1];if(hasTrailingSlash){var newPath=path.substr(0,path.length-1);$location.replace().path(newPath)}}),$urlRouterProvider.otherwise(function($injector,$location){$injector.get("$state").transitionTo("not-found",null,{location:!1})}),$stateProvider.state("home",{url:"/",templateUrl:"modules/core/client/views/home.client.view.html",controller:"HomeController",controllerAs:"vm"}).state("not-found",{url:"/not-found",templateUrl:"modules/core/client/views/404.client.view.html",data:{ignoreState:!0,pageTitle:"Not-Found"}}).state("bad-request",{url:"/bad-request",templateUrl:"modules/core/client/views/400.client.view.html",data:{ignoreState:!0,pageTitle:"Bad-Request"}}).state("forbidden",{url:"/forbidden",templateUrl:"modules/core/client/views/403.client.view.html",data:{ignoreState:!0,pageTitle:"Forbidden"}})}angular.module("core.routes").config(routeConfig),routeConfig.$inject=["$stateProvider","$urlRouterProvider"]}(),function(){"use strict";function HeaderController($scope,$state,Authentication,menuService,$mdSidenav){function stateChangeSuccess(){$mdSidenav("left").close()}function toggleList(){$mdSidenav("left").toggle()}function isOpen(menuState){return menuService.isSectionSelected(menuState)}function toggleOpen(menuState){menuService.toggleSelectSection(menuState)}var vm=this;vm.accountMenu=menuService.getMenu("account").items[0],vm.authentication=Authentication,vm.menu=menuService.getMenu("topbar"),vm.toggleList=toggleList,vm.isOpen=isOpen,vm.toggleOpen=toggleOpen,$scope.$on("$stateChangeSuccess",stateChangeSuccess)}angular.module("core").controller("HeaderController",HeaderController),HeaderController.$inject=["$scope","$state","Authentication","menuService","$mdSidenav"]}(),function(){"use strict";function HomeController($mdSidenav){}angular.module("core").controller("HomeController",HomeController),HomeController.$inject=["$mdSidenav"]}(),function(){"use strict";function pageTitle($rootScope,$timeout,$interpolate,$state){function link(scope,element){function listener(event,toState){var title=getTitle($state.$current);$timeout(function(){element.text(title)},0,!1)}function getTitle(currentState){var applicationCoreTitle="AutoWorks",workingState=currentState;if(currentState.data){workingState="undefined"!=typeof workingState.locals?workingState.locals.globals:workingState;var stateTitle=$interpolate(currentState.data.pageTitle)(workingState);return applicationCoreTitle+" - "+stateTitle}return applicationCoreTitle}$rootScope.$on("$stateChangeSuccess",listener)}var directive={restrict:"A",link:link};return directive}angular.module("core").directive("pageTitle",pageTitle),pageTitle.$inject=["$rootScope","$timeout","$interpolate","$state"]}(),function(){"use strict";function showErrors($timeout,$interpolate){function compile(elem,attrs){function linkFn(scope,el,attrs,formCtrl){function checkValidity(event,name){if(angular.isUndefined(name)||formCtrl.$name===name)return initCheck=!0,showValidationMessages=!0,toggleClasses(formCtrl[inputName].$invalid)}function reset(event,name){if(angular.isUndefined(name)||formCtrl.$name===name)return $timeout(function(){el.removeClass("has-error"),el.removeClass("has-success"),showValidationMessages=!1},0,!1)}function toggleClasses(invalid){if(el.toggleClass("has-error",showValidationMessages&&invalid),showSuccess)return el.toggleClass("has-success",showValidationMessages&&!invalid)}var inputEl,inputName,inputNgEl,options,showSuccess,initCheck=!1,showValidationMessages=!1;if(options=scope.$eval(attrs.showErrors)||{},showSuccess=options.showSuccess||!1,inputEl=el[0].querySelector(".form-control[name]")||el[0].querySelector("[name]"),inputNgEl=angular.element(inputEl),inputName=$interpolate(inputNgEl.attr("name")||"")(scope),!inputName)throw new Error("show-errors element has no child input elements with a 'name' attribute class");scope.$watch(function(){return formCtrl[inputName]&&formCtrl[inputName].$invalid},toggleClasses),scope.$on("show-errors-check-validity",checkValidity),scope.$on("show-errors-reset",reset)}if(attrs.showErrors.indexOf("skipFormGroupCheck")===-1&&!elem.hasClass("form-group")&&!elem.hasClass("input-group"))throw new Error("show-errors element does not have the 'form-group' or 'input-group' class");return linkFn}var directive={restrict:"A",require:"^form",compile:compile};return directive}angular.module("core").directive("showErrors",showErrors),showErrors.$inject=["$timeout","$interpolate"]}(),function(){"use strict";function authInterceptor($q,$injector,Authentication){function responseError(rejection){if(!rejection.config.ignoreAuthModule)switch(rejection.status){case 401:Authentication.user=null,$injector.get("$state").transitionTo("authentication.signin");break;case 403:$injector.get("$state").transitionTo("forbidden")}return $q.reject(rejection)}var service={responseError:responseError};return service}angular.module("core").factory("authInterceptor",authInterceptor),authInterceptor.$inject=["$q","$injector","Authentication"]}(),function(){"use strict";function menuService(){function addMenu(menuId,options){return options=options||{},service.menus[menuId]={roles:options.roles||service.defaultRoles,items:options.items||[],shouldRender:shouldRender},service.menus[menuId]}function addMenuItem(menuId,options){if(options=options||{},service.validateMenuExistence(menuId),service.menus[menuId].items.push({title:options.title||"",state:options.state||"",type:options.type||"item","class":options["class"],roles:null===options.roles||"undefined"==typeof options.roles?service.defaultRoles:options.roles,position:options.position||0,items:[],shouldRender:shouldRender}),options.items)for(var i in options.items)options.items.hasOwnProperty(i)&&service.addSubMenuItem(menuId,options.state,options.items[i]);return service.menus[menuId]}function addSubMenuItem(menuId,parentItemState,options){options=options||{},service.validateMenuExistence(menuId);for(var itemIndex in service.menus[menuId].items)service.menus[menuId].items[itemIndex].state===parentItemState&&service.menus[menuId].items[itemIndex].items.push({title:options.title||"",state:options.state||"",roles:null===options.roles||"undefined"==typeof options.roles?service.menus[menuId].items[itemIndex].roles:options.roles,position:options.position||0,shouldRender:shouldRender});return service.menus[menuId]}function getMenu(menuId){return service.validateMenuExistence(menuId),service.menus[menuId]}function init(){shouldRender=function(user){if(this.roles.indexOf("*")!==-1)return!0;if(!user)return!1;for(var userRoleIndex in user.roles)if(user.roles.hasOwnProperty(userRoleIndex))for(var roleIndex in this.roles)if(this.roles.hasOwnProperty(roleIndex)&&this.roles[roleIndex]===user.roles[userRoleIndex])return!0;return!1},addMenu("topbar",{roles:["*"]})}function removeMenu(menuId){service.validateMenuExistence(menuId),delete service.menus[menuId]}function removeMenuItem(menuId,menuItemState){service.validateMenuExistence(menuId);for(var itemIndex in service.menus[menuId].items)service.menus[menuId].items.hasOwnProperty(itemIndex)&&service.menus[menuId].items[itemIndex].state===menuItemState&&service.menus[menuId].items.splice(itemIndex,1);return service.menus[menuId]}function removeSubMenuItem(menuId,submenuItemState){service.validateMenuExistence(menuId);for(var itemIndex in service.menus[menuId].items)if(this.menus[menuId].items.hasOwnProperty(itemIndex))for(var subitemIndex in service.menus[menuId].items[itemIndex].items)this.menus[menuId].items[itemIndex].items.hasOwnProperty(subitemIndex)&&service.menus[menuId].items[itemIndex].items[subitemIndex].state===submenuItemState&&service.menus[menuId].items[itemIndex].items.splice(subitemIndex,1);return service.menus[menuId]}function validateMenuExistence(menuId){if(menuId&&menuId.length){if(service.menus[menuId])return!0;throw new Error("Menu does not exist")}throw new Error("MenuId was not provided")}function toggleSelectSection(menuState){self.openedMenu=self.openedMenu===menuState?null:menuState}function isSectionSelected(menuState){return self.openedMenu===menuState}var shouldRender,service={addMenu:addMenu,addMenuItem:addMenuItem,addSubMenuItem:addSubMenuItem,defaultRoles:["user","admin"],getMenu:getMenu,menus:{},removeMenu:removeMenu,removeMenuItem:removeMenuItem,removeSubMenuItem:removeSubMenuItem,validateMenuExistence:validateMenuExistence,toggleSelectSection:toggleSelectSection,isSectionSelected:isSectionSelected};return init(),service}angular.module("core").factory("menuService",menuService)}(),function(){"use strict";function Socket(Authentication,$state,$timeout){function connect(){Authentication.user&&(service.socket=io())}function emit(eventName,data){service.socket&&service.socket.emit(eventName,data)}function on(eventName,callback){service.socket&&service.socket.on(eventName,function(data){$timeout(function(){callback(data)})})}function removeListener(eventName){service.socket&&service.socket.removeListener(eventName)}var service={connect:connect,emit:emit,on:on,removeListener:removeListener,socket:null};return connect(),service}angular.module("core").factory("Socket",Socket),Socket.$inject=["Authentication","$state","$timeout"]}(),function(){"use strict";function menuConfig(menuService){menuService.addSubMenuItem("topbar","admin",{title:"Manage Users",state:"admin.users"})}angular.module("users.admin").run(menuConfig),menuConfig.$inject=["menuService"]}(),function(){"use strict";function routeConfig($stateProvider){function getUser($stateParams,AdminService){return AdminService.get({userId:$stateParams.userId}).$promise}$stateProvider.state("admin.users",{url:"/users",templateUrl:"modules/users/client/views/admin/list-users.client.view.html",controller:"UserListController",controllerAs:"vm",data:{pageTitle:"Users List"}}).state("admin.user",{url:"/users/:userId",templateUrl:"modules/users/client/views/admin/view-user.client.view.html",controller:"UserController",controllerAs:"vm",resolve:{userResolve:getUser},data:{pageTitle:"Edit {{ userResolve.displayName }}"}}).state("admin.user-edit",{url:"/users/:userId/edit",templateUrl:"modules/users/client/views/admin/edit-user.client.view.html",controller:"UserController",controllerAs:"vm",resolve:{userResolve:getUser},data:{pageTitle:"Edit User {{ userResolve.displayName }}"}}),getUser.$inject=["$stateParams","AdminService"]}angular.module("users.admin.routes").config(routeConfig),routeConfig.$inject=["$stateProvider"]}(),function(){"use strict";function routeConfig($stateProvider){$stateProvider.state("settings",{"abstract":!0,url:"/settings",templateUrl:"modules/users/client/views/settings/settings.client.view.html",controller:"SettingsController",controllerAs:"vm",data:{roles:["user","admin"]}}).state("settings.profile",{url:"/profile",templateUrl:"modules/users/client/views/settings/edit-profile.client.view.html",controller:"EditProfileController",controllerAs:"vm",data:{pageTitle:"Settings"}}).state("settings.password",{url:"/password",templateUrl:"modules/users/client/views/settings/change-password.client.view.html",controller:"ChangePasswordController",controllerAs:"vm",data:{pageTitle:"Settings password"}}).state("settings.picture",{url:"/picture",templateUrl:"modules/users/client/views/settings/change-profile-picture.client.view.html",controller:"ChangeProfilePictureController",controllerAs:"vm",data:{pageTitle:"Settings picture"}}).state("authentication",{"abstract":!0,url:"/authentication",templateUrl:"modules/users/client/views/authentication/authentication.client.view.html",controller:"AuthenticationController",controllerAs:"vm"}).state("authentication.signup",{url:"/signup",templateUrl:"modules/users/client/views/authentication/signup.client.view.html",controller:"AuthenticationController",controllerAs:"vm",data:{pageTitle:"Signup"}}).state("authentication.signin",{url:"/signin?err",templateUrl:"modules/users/client/views/authentication/signin.client.view.html",controller:"AuthenticationController",controllerAs:"vm",data:{pageTitle:"Signin"}}).state("password",{"abstract":!0,url:"/password",template:"<ui-view/>"}).state("password.forgot",{url:"/forgot",templateUrl:"modules/users/client/views/password/forgot-password.client.view.html",controller:"PasswordController",controllerAs:"vm",data:{pageTitle:"Password forgot"}}).state("password.reset",{"abstract":!0,url:"/reset",template:"<ui-view/>"}).state("password.reset.invalid",{url:"/invalid",templateUrl:"modules/users/client/views/password/reset-password-invalid.client.view.html",data:{pageTitle:"Password reset invalid"}}).state("password.reset.success",{url:"/success",templateUrl:"modules/users/client/views/password/reset-password-success.client.view.html",data:{pageTitle:"Password reset success"}}).state("password.reset.form",{url:"/:token",templateUrl:"modules/users/client/views/password/reset-password.client.view.html",controller:"PasswordController",controllerAs:"vm",data:{pageTitle:"Password reset form"}})}angular.module("users.routes").config(routeConfig),routeConfig.$inject=["$stateProvider"]}(),function(){"use strict";function UserListController($scope,$filter,AdminService){function buildPager(){vm.pagedItems=[],vm.itemsPerPage=15,vm.currentPage=1,vm.figureOutItemsToDisplay()}function figureOutItemsToDisplay(){vm.filteredItems=$filter("filter")(vm.users,{$:vm.search}),vm.filterLength=vm.filteredItems.length;var begin=(vm.currentPage-1)*vm.itemsPerPage,end=begin+vm.itemsPerPage;vm.pagedItems=vm.filteredItems.slice(begin,end)}function pageChanged(){vm.figureOutItemsToDisplay()}var vm=this;vm.buildPager=buildPager,vm.figureOutItemsToDisplay=figureOutItemsToDisplay,vm.pageChanged=pageChanged,AdminService.query(function(data){vm.users=data,vm.buildPager()})}angular.module("users.admin").controller("UserListController",UserListController),UserListController.$inject=["$scope","$filter","AdminService"]}(),function(){"use strict";function UserController($scope,$state,$window,Authentication,user,$mdToast){function remove(user){$window.confirm("Are you sure you want to delete this user?")&&(user?(user.$remove(),vm.users.splice(vm.users.indexOf(user),1)):vm.user.$remove(function(){$state.go("admin.users")}))}function update(isValid){if(!isValid)return $scope.$broadcast("show-errors-check-validity","vm.userForm"),!1;var user=vm.user;user.$update(function(){$state.go("admin.user",{userId:user._id})},function(errorResponse){vm.error=errorResponse.data.message,$mdToast.show($mdToast.simple().textContent(vm.error).hideDelay(3e3))})}var vm=this;vm.authentication=Authentication,vm.user=user,vm.remove=remove,vm.update=update}angular.module("users.admin").controller("UserController",UserController),UserController.$inject=["$scope","$state","$window","Authentication","userResolve","$mdToast"]}(),function(){"use strict";function AuthenticationController($scope,$state,$http,$location,$window,Authentication,PasswordValidator,$mdToast){function signup(isValid){return vm.error=null,isValid?void $http.post("/api/auth/signup",vm.credentials).success(function(response){vm.authentication.user=response,$mdToast.show($mdToast.simple().textContent("Welcome "+vm.authentication.user.displayName).hideDelay(3e3)),$state.go($state.previous.state.name||"home",$state.previous.params)}).error(function(response){vm.error=response.message,$mdToast.show($mdToast.simple().textContent(vm.error).hideDelay(3e3))}):($scope.$broadcast("show-errors-check-validity","vm.userForm"),!1)}function signin(isValid){return vm.error=null,isValid?void $http.post("/api/auth/signin",vm.credentials).success(function(response){vm.authentication.user=response,$mdToast.show($mdToast.simple().textContent("Welcome "+vm.authentication.user.displayName).hideDelay(3e3)),$state.go($state.previous.state.name||"home",$state.previous.params)}).error(function(response){vm.error=response.message,$mdToast.show($mdToast.simple().textContent(vm.error).hideDelay(3e3))}):($scope.$broadcast("show-errors-check-validity","vm.userForm"),!1)}function callOauthProvider(url){$state.previous&&$state.previous.href&&(url+="?redirect_to="+encodeURIComponent($state.previous.href)),$window.location.href=url}var vm=this;vm.authentication=Authentication,vm.getPopoverMsg=PasswordValidator.getPopoverMsg,vm.signup=signup,vm.signin=signin,vm.callOauthProvider=callOauthProvider,vm.error=$location.search().err,vm.authentication.user&&$location.path("/")}angular.module("users").controller("AuthenticationController",AuthenticationController),AuthenticationController.$inject=["$scope","$state","$http","$location","$window","Authentication","PasswordValidator","$mdToast"]}(),function(){"use strict";function PasswordController($scope,$stateParams,$http,$location,Authentication,PasswordValidator,$mdToast){function askForPasswordReset(isValid){return vm.success=vm.error=null,isValid?void $http.post("/api/auth/forgot",vm.credentials).success(function(response){vm.credentials=null,vm.success=response.message,$mdToast.show($mdToast.simple().textContent(vm.success).hideDelay(3e3))}).error(function(response){vm.credentials=null,vm.error=response.message,$mdToast.show($mdToast.simple().textContent(vm.error).hideDelay(3e3))}):($scope.$broadcast("show-errors-check-validity","vm.forgotPasswordForm"),!1)}function resetUserPassword(isValid){return vm.success=vm.error=null,isValid?void $http.post("/api/auth/reset/"+$stateParams.token,vm.passwordDetails).success(function(response){vm.passwordDetails=null,Authentication.user=response,$location.path("/password/reset/success")}).error(function(response){vm.error=response.message,$mdToast.show($mdToast.simple().textContent(vm.error).hideDelay(3e3))}):($scope.$broadcast("show-errors-check-validity","vm.resetPasswordForm"),!1)}var vm=this;vm.resetUserPassword=resetUserPassword,vm.askForPasswordReset=askForPasswordReset,vm.authentication=Authentication,vm.getPopoverMsg=PasswordValidator.getPopoverMsg,vm.authentication.user&&$location.path("/")}angular.module("users").controller("PasswordController",PasswordController),PasswordController.$inject=["$scope","$stateParams","$http","$location","Authentication","PasswordValidator","$mdToast"]}(),function(){"use strict";function ChangePasswordController($scope,$http,Authentication,PasswordValidator,$mdToast){function changeUserPassword(isValid){return vm.success=vm.error=null,isValid?void $http.post("/api/users/password",vm.passwordDetails).success(function(response){$scope.$broadcast("show-errors-reset","vm.passwordForm"),vm.success=!0,vm.passwordDetails=null,$mdToast.show($mdToast.simple().textContent("Password Changed Successfully").hideDelay(3e3))}).error(function(response){vm.error=response.message,$mdToast.show($mdToast.simple().textContent(vm.error).hideDelay(3e3))}):($scope.$broadcast("show-errors-check-validity","vm.passwordForm"),!1)}var vm=this;vm.user=Authentication.user,vm.changeUserPassword=changeUserPassword,vm.getPopoverMsg=PasswordValidator.getPopoverMsg}angular.module("users").controller("ChangePasswordController",ChangePasswordController),ChangePasswordController.$inject=["$scope","$http","Authentication","PasswordValidator","$mdToast"]}(),function(){"use strict";function ChangeProfilePictureController($scope,$timeout,$window,Authentication,FileUploader,$mdToast){function onAfterAddingFile(fileItem){if($window.FileReader){var fileReader=new FileReader;fileReader.readAsDataURL(fileItem._file),fileReader.onload=function(fileReaderEvent){$timeout(function(){vm.imageURL=fileReaderEvent.target.result},0)}}}function onSuccessItem(fileItem,response,status,headers){vm.success=!0,vm.user=Authentication.user=response,$mdToast.show($mdToast.simple().textContent("Profile Picture Changed Successfully").hideDelay(3e3)),cancelUpload()}function onErrorItem(fileItem,response,status,headers){cancelUpload(),vm.error=response.message,$mdToast.show($mdToast.simple().textContent(vm.error).hideDelay(3e3))}function uploadProfilePicture(){vm.success=vm.error=null,vm.uploader.uploadAll()}function cancelUpload(){vm.uploader.clearQueue(),vm.imageURL=vm.user.profileImageURL}var vm=this;vm.user=Authentication.user,vm.imageURL=vm.user.profileImageURL,vm.uploadProfilePicture=uploadProfilePicture,vm.cancelUpload=cancelUpload,vm.uploader=new FileUploader({url:"api/users/picture",alias:"newProfilePicture",onAfterAddingFile:onAfterAddingFile,onSuccessItem:onSuccessItem,onErrorItem:onErrorItem}),vm.uploader.filters.push({name:"imageFilter",fn:function(item,options){var type="|"+item.type.slice(item.type.lastIndexOf("/")+1)+"|";return"|jpg|png|jpeg|bmp|gif|".indexOf(type)!==-1}})}angular.module("users").controller("ChangeProfilePictureController",ChangeProfilePictureController),ChangeProfilePictureController.$inject=["$scope","$timeout","$window","Authentication","FileUploader","$mdToast"]}(),function(){"use strict";function EditProfileController($scope,$http,$location,UsersService,Authentication,$mdToast){function updateUserProfile(isValid){if(vm.success=vm.error=null,!isValid)return $scope.$broadcast("show-errors-check-validity","vm.userForm"),!1;var user=new UsersService(vm.user);user.$update(function(response){$scope.$broadcast("show-errors-reset","vm.userForm"),vm.success=!0,$mdToast.show($mdToast.simple().textContent("Profile Saved Successfully").hideDelay(3e3)),Authentication.user=response},function(response){vm.error=response.data.message,$mdToast.show($mdToast.simple().textContent(vm.error).hideDelay(3e3))})}var vm=this;vm.user=Authentication.user,vm.updateUserProfile=updateUserProfile}angular.module("users").controller("EditProfileController",EditProfileController),EditProfileController.$inject=["$scope","$http","$location","UsersService","Authentication","$mdToast"]}(),function(){"use strict";function SettingsController($scope,Authentication){var vm=this;vm.user=Authentication.user}angular.module("users").controller("SettingsController",SettingsController),SettingsController.$inject=["$scope","Authentication"]}(),function(){"use strict";function passwordValidator(PasswordValidator){function link(scope,element,attrs,ngModel){ngModel.$validators.requirements=function(password){var status=!0;if(password){var result=PasswordValidator.getResult(password),requirementsIdx=0,requirementsMeter=[{color:"danger",progress:"20"},{color:"warning",progress:"40"},{color:"info",progress:"60"},{color:"primary",progress:"80"},{color:"success",progress:"100"}];result.errors.length<requirementsMeter.length&&(requirementsIdx=requirementsMeter.length-result.errors.length-1),scope.requirementsColor=requirementsMeter[requirementsIdx].color,scope.requirementsProgress=requirementsMeter[requirementsIdx].progress,result.errors.length?(scope.getPopoverMsg=PasswordValidator.getPopoverMsg(),scope.passwordErrors=result.errors,status=!1):(scope.getPopoverMsg="",scope.passwordErrors=[],status=!0)}return status}}var directive={require:"ngModel",link:link};return directive}angular.module("users").directive("passwordValidator",passwordValidator),passwordValidator.$inject=["PasswordValidator"]}(),function(){"use strict";function passwordVerify(){function link(scope,element,attrs,ngModel){scope.$watch(function(){var combined;return(scope.passwordVerify||ngModel)&&(combined=scope.passwordVerify+"_"+ngModel),combined},function(value){
value&&(ngModel.$validators.passwordVerify=function(password){var origin=scope.passwordVerify;return origin===password})})}var directive={require:"ngModel",scope:{passwordVerify:"="},link:link};return directive}angular.module("users").directive("passwordVerify",passwordVerify)}(),function(){"use strict";function lowercase(){function link(scope,element,attrs,modelCtrl){modelCtrl.$parsers.push(function(input){return input?input.toLowerCase():""}),element.css("text-transform","lowercase")}var directive={require:"ngModel",link:link};return directive}angular.module("users").directive("lowercase",lowercase)}(),function(){"use strict";function Authentication($window){var auth={user:$window.user};return auth}angular.module("users.services").factory("Authentication",Authentication),Authentication.$inject=["$window"]}(),function(){"use strict";function PasswordValidator($window){function getResult(password){var result=owaspPasswordStrengthTest.test(password);return result}function getPopoverMsg(){var popoverMsg="Please enter a passphrase or password with 10 or more characters, numbers, lowercase, uppercase, and special characters.";return popoverMsg}var owaspPasswordStrengthTest=$window.owaspPasswordStrengthTest,service={getResult:getResult,getPopoverMsg:getPopoverMsg};return service}angular.module("users.services").factory("PasswordValidator",PasswordValidator),PasswordValidator.$inject=["$window"]}(),function(){"use strict";function UsersService($resource){return $resource("api/users",{},{update:{method:"PUT"}})}function AdminService($resource){return $resource("api/users/:userId",{userId:"@_id"},{update:{method:"PUT"}})}angular.module("users.services").factory("UsersService",UsersService),UsersService.$inject=["$resource"],angular.module("users.admin.services").factory("AdminService",AdminService),AdminService.$inject=["$resource"]}(),function(){"use strict";function menuConfig(menuService){menuService.addMenuItem("topbar",{title:"Workshops",state:"workshops",type:"dropdown",roles:["*"]}),menuService.addSubMenuItem("topbar","workshops",{title:"List Workshops",state:"workshops.list"}),menuService.addSubMenuItem("topbar","workshops",{title:"My Workshop",state:"workshops.user",roles:["user"]})}angular.module("workshops").run(menuConfig),menuConfig.$inject=["menuService"]}(),function(){"use strict";function routeConfig($stateProvider){$stateProvider.state("workshops",{"abstract":!0,url:"/workshops",template:"<ui-view/>"}).state("workshops.list",{url:"",templateUrl:"modules/workshops/client/views/list-workshops.client.view.html",controller:"WorkshopsListController",controllerAs:"vm",data:{pageTitle:"Workshops List"}}).state("workshops.create",{url:"/create",templateUrl:"modules/workshops/client/views/form-workshop.client.view.html",controller:"WorkshopsController",controllerAs:"vm",resolve:{workshopResolve:newWorkshop},data:{roles:["user","admin"],pageTitle:"Workshops Create"}}).state("workshops.user",{url:"/user",templateUrl:"modules/workshops/client/views/user-workshop.client.view.html",controller:"WorkshopsController",controllerAs:"vm",resolve:{workshopResolve:getMyWorkshop},data:{pageTitle:"Workshop {{ workshopResolve.title }}"}}).state("workshops.edit",{url:"/:workshopId/edit",templateUrl:"modules/workshops/client/views/form-workshop.client.view.html",controller:"WorkshopsController",controllerAs:"vm",resolve:{workshopResolve:getWorkshop},data:{roles:["user","admin"],pageTitle:"Edit Workshop {{ workshopResolve.title }}"}}).state("workshops.view",{url:"/:workshopId",templateUrl:"modules/workshops/client/views/view-workshop.client.view.html",controller:"WorkshopsController",controllerAs:"vm",resolve:{workshopResolve:getWorkshop},data:{pageTitle:"Workshop {{ workshopResolve.title }}"}})}function getWorkshop($stateParams,WorkshopsService){return WorkshopsService.get({workshopId:$stateParams.workshopId}).$promise}function getMyWorkshop(WorkshopsService,Authentication){return WorkshopsService.user({username:Authentication.user.username,subroute:"user"}).$promise}function newWorkshop(WorkshopsService){return new WorkshopsService}angular.module("workshops.routes").config(routeConfig),routeConfig.$inject=["$stateProvider"],getWorkshop.$inject=["$stateParams","WorkshopsService"],getMyWorkshop.$inject=["WorkshopsService","Authentication"],newWorkshop.$inject=["WorkshopsService"]}(),function(){"use strict";function WorkshopsListController(WorkshopsService){var vm=this;vm.workshops=WorkshopsService.query()}angular.module("workshops").controller("WorkshopsListController",WorkshopsListController),WorkshopsListController.$inject=["WorkshopsService"]}(),function(){"use strict";function WorkshopsController($scope,$state,workshop,$window,Authentication){function remove(){$window.confirm("Are you sure you want to delete?")&&vm.workshop.$remove($state.go("workshops.list"))}function save(isValid){function successCallback(res){$state.go("workshops.user")}function errorCallback(res){vm.error=res.data.message}return isValid?void(vm.workshop._id?vm.workshop.$update(successCallback,errorCallback):vm.workshop.$save(successCallback,errorCallback)):($scope.$broadcast("show-errors-check-validity","vm.form.workshopForm"),!1)}var vm=this;vm.workshop=workshop,vm.authentication=Authentication,vm.error=null,vm.form={},vm.remove=remove,vm.save=save}angular.module("workshops").controller("WorkshopsController",WorkshopsController),WorkshopsController.$inject=["$scope","$state","workshopResolve","$window","Authentication"]}(),function(){"use strict";function WorkshopsService($resource){return $resource("api/workshops/:subroute:workshopId/:username",{workshopId:"@_id",username:"@_username",subroute:"@_subroute"},{update:{method:"PUT"},user:{method:"GET"}})}angular.module("workshops.services").factory("WorkshopsService",WorkshopsService),WorkshopsService.$inject=["$resource"]}();